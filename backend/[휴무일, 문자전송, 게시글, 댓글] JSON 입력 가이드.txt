[휴무일 JSON]

=== 휴무일 등록
{
  "closedId": 0,                             휴무일ID(PK)는 중복 값을 피해 입력          
  "facilityId": 0,				존재하는 시설 ID 등록
  "closedDate": "2025-09-09",		등록 날짜
  "closedContent": "정기휴관"        휴무 사유
}


=== 휴무일 수정
{
  "closedId": 1,               		수정하려는 휴무일의 실제 ID로 변경 (0 대신)
  "facilityId": 1,             		존재하는 시설 ID로 변경 (0 대신)
  "closedDate": "2025-09-04",		원하는 날짜
  "closedContent": "점검 완료"	원하는 수정 사유
}


=== 휴무일 삭제
*삭제 할 휴무일 ID(PK) 입력


=== 시설별 휴무일 조회
* 존재하는 시설 ID 
* 조회 시작을 원하는 날짜
* 조회 종료를 원하는 날짜



[문자전송 JSON]

=== 문자 전송 요청
{
  "memberId": "hong10",        				문자 수신자 ID: 반드시 DB에 존재하는 회원 ID를 넣어야 함
  "resvId": null, 							관련 예약 ID: 예약 연관이 없으면 null로 보내거나 삭제
  "closedId": null,  						관련 휴관일 ID: 휴관 정보 없으면 null 또는 삭제
  "messageType": "예약확인",  				문자 유형: DB 제약조건 내 허용 값만 가능 ("예약확인", "예약취소", "휴관공지")
  "messageContent": "테스트 메시지 내용입니다."	문자 내용: 테스트용 임의 문자열 입력
  "messageDate": "2025-09-04T06:26:43.858Z"		문자 발송 일시: ISO 8601형식 문자열, 없으면 서버시간으로 처리 가능 
}

messageId는 일반적으로 클라이언트에서 넣지 않으며 DB 시퀀스로 자동 생성되므로 생략 가능


== 문자 전송 입력 예시
{
  "memberId": "hong10",
  "resvId": null,
  "closedId": null,
  "messageType": "예약확인용",
  "messageContent": "테스트 메시지.",
  "messageDate": "2025-09-04T06:26:43.858Z"
}


=== 전체 메시지 목록 조회
* 조회할 메시지 개수
* 조회 시작 위치(0부터)


=== 단건 메시지 조회
* 조회할 메시지 ID


=== 예약별 메시지 목록 조회
* 조회할 예약 ID


=== 회원별 메시지 목록 조회
* 회원 ID
* 조회할 개수
* 조회 시작 위치


=== 회원별 메시지 개수 조회
* 회원 ID


=== 전체 메시지 개수 조회
* 입력 필요 없이 바로 Execute


[게시글 JSON]

=== 게시글 등록
{
  "boardId": 1,               			존재하는 게시판 ID 숫자 (숫자 0은 없는 경우 에러날 수 있음)
  "postTitle": "테스트 제목",			게시글 제목
  "postContent": "테스트 내용",		게시글 내용
  "memberId": "hong10",       		실제 회원 ID 문자열
  "postNotice": true,         			공지글 여부(참이면 'Y'로 변환)
  "postSecret": false,      			비밀글 여부(거짓이면 'N'로 변환)
  "postType": "일반"				일반 혹은 공지
}


=== 게시글 등록 입력 예시
{
  "boardId":1 ,
  "postTitle": "제목",
  "postContent": "내용",
  "memberId": "hong5",
  "postNotice": true,
  "postSecret": true,
  "postType": "일반"
}


=== 게시글 수정
{
  "postId": 수정할 게시판ID,
  "boardId": 수정할 게시글ID,
  "postTitle": "제목 수정",
  "postContent": "내용 수정",
  "memberId": "작성자ID 수정",
  ===== "postRegDate": 등록일 입력 생략 => sysdate로 자동 입력
  ===== "postModDate": 수정일 입력 생략 => sysdate로 자동 입력
  "postViewCount": 조회수,
  "postNotice": 공지글 true(공지)/false(일반),
  "postSecret": 비밀글 true(Y)/false(N) ,
  "postType": "공지/일반 텍스트로 입력"
}


=== 게시글 수정 입력 예시
{
  "postId": 1,
  "boardId": 1,
  "postTitle": "첫 번째 공지사항 수정",
  "postContent": "공지사항 내용 수정",
  "memberId": "hong10",
  "postViewCount": 0,
  "postNotice": true,
  "postSecret": true,
  "postType": "공지"
}


=== 게시글 삭제
* 존재하는 게시판ID
* 존재하는 게시글ID


=== 게시글 단건 조회
* 존재하는 게시판 ID
* 존재하는 게시글 ID


=== 게시판별 게시글 목록
* 조회할 게시판ID
* 조회할 페이지 번호(1부터 시작)
* 한 페이지당 게시글 개수
* 게시글 제목, 내용에 포함되는 검색어(생략 가능)
* true: 공지글 , false: 일반글

[댓글 JSON]

=== 댓글 등록
{
  "postId": 3,				데이터에 등록되어있는 게시글ID
  "memberId": "hong3" 		작성자 ID
  "content": "댓글등록" 			댓글 내용
}


=== 회원ID와 댓글ID로 댓글 수정
* 수정할 회원ID
* 수정할 댓글ID

{
  "postId": 2,				존재하는 게시글ID
  "memberId": "hong2",			수정할 작성자 ID
  "content": "댓글수정"			수정할 댓글 내용
}


=== 댓글 삭제
* 삭제할 댓글ID


== 게시글 댓글 목록 조회
* 댓글 조회 대상 게시글ID